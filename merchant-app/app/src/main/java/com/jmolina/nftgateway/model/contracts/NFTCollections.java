package com.jmolina.nftgateway.model.contracts;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import io.reactivex.Flowable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class NFTCollections extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040516200481e3803806200481e833981810160405281019062000037919062000300565b80620000586200004c6200008c60201b60201c565b6200009460201b60201c565b62000069816200015860201b60201c565b506000600460006101000a81548160ff0219169083151502179055505062000683565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600390816200016991906200059c565b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d6826200018b565b810181811067ffffffffffffffff82111715620001f857620001f76200019c565b5b80604052505050565b60006200020d6200016d565b90506200021b8282620001cb565b919050565b600067ffffffffffffffff8211156200023e576200023d6200019c565b5b62000249826200018b565b9050602081019050919050565b60005b838110156200027657808201518184015260208101905062000259565b60008484015250505050565b600062000299620002938462000220565b62000201565b905082815260208101848484011115620002b857620002b762000186565b5b620002c584828562000256565b509392505050565b600082601f830112620002e557620002e462000181565b5b8151620002f784826020860162000282565b91505092915050565b60006020828403121562000319576200031862000177565b5b600082015167ffffffffffffffff8111156200033a57620003396200017c565b5b6200034884828501620002cd565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003a457607f821691505b602082108103620003ba57620003b96200035c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003e5565b620004308683620003e5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200047d62000477620004718462000448565b62000452565b62000448565b9050919050565b6000819050919050565b62000499836200045c565b620004b1620004a88262000484565b848454620003f2565b825550505050565b600090565b620004c8620004b9565b620004d58184846200048e565b505050565b5b81811015620004fd57620004f1600082620004be565b600181019050620004db565b5050565b601f8211156200054c576200051681620003c0565b6200052184620003d5565b8101602085101562000531578190505b620005496200054085620003d5565b830182620004da565b50505b505050565b600082821c905092915050565b6000620005716000198460080262000551565b1980831691505092915050565b60006200058c83836200055e565b9150826002028217905092915050565b620005a78262000351565b67ffffffffffffffff811115620005c357620005c26200019c565b5b620005cf82546200038b565b620005dc82828562000501565b600060209050601f831160018114620006145760008415620005ff578287015190505b6200060b85826200057e565b8655506200067b565b601f1984166200062486620003c0565b60005b828110156200064e5784890151825560018201915060208501945060208101905062000627565b868310156200066e57848901516200066a601f8916826200055e565b8355505b6001600288020188555050505b505050505050565b61418b80620006936000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637f49ac36116100b8578063a647e8ec1161007c578063a647e8ec1461035d578063bd85b03914610379578063e985e9c5146103a9578063ea75159f146103d9578063f242432a146103f5578063f2fde38b1461041157610136565b80637f49ac36146102a75780638da5cb5b146102c35780638e2fbb63146102e157806392c8823b14610311578063a22cb4651461034157610136565b80634e1273f4116100ff5780634e1273f4146102035780634f558e79146102335780635bc11e84146102635780635c975abb1461027f578063715018a61461029d57610136565b8062fdd58e1461013b57806301ffc9a71461016b5780630e89341c1461019b5780632be6f875146101cb5780632eb2c2d6146101e7575b600080fd5b6101556004803603810190610150919061254c565b61042d565b604051610162919061259b565b60405180910390f35b6101856004803603810190610180919061260e565b6104f6565b6040516101929190612656565b60405180910390f35b6101b560048036038101906101b09190612671565b6105d8565b6040516101c2919061272e565b60405180910390f35b6101e560048036038101906101e091906128bb565b61066c565b005b61020160048036038101906101fc9190612a22565b61080d565b005b61021d60048036038101906102189190612bb4565b6108ae565b60405161022a9190612cea565b60405180910390f35b61024d60048036038101906102489190612671565b6109c7565b60405161025a9190612656565b60405180910390f35b61027d60048036038101906102789190612d0c565b6109db565b005b610287610a03565b6040516102949190612656565b60405180910390f35b6102a5610a1a565b005b6102c160048036038101906102bc9190612d5f565b610a2e565b005b6102cb610aa3565b6040516102d89190612dae565b60405180910390f35b6102fb60048036038101906102f69190612d5f565b610acc565b6040516103089190612656565b60405180910390f35b61032b60048036038101906103269190612671565b610afb565b604051610338919061259b565b60405180910390f35b61035b60048036038101906103569190612df5565b610b13565b005b61037760048036038101906103729190612e35565b610b29565b005b610393600480360381019061038e9190612671565b610c20565b6040516103a0919061259b565b60405180910390f35b6103c360048036038101906103be9190612e9c565b610c3d565b6040516103d09190612656565b60405180910390f35b6103f360048036038101906103ee9190612d5f565b610cd1565b005b61040f600480360381019061040a9190612edc565b610d46565b005b61042b60048036038101906104269190612f73565b610de7565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361049d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049490613012565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105c157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105d157506105d082610e6a565b5b9050919050565b6060600380546105e790613061565b80601f016020809104026020016040519081016040528092919081815260200182805461061390613061565b80156106605780601f1061063557610100808354040283529160200191610660565b820191906000526020600020905b81548152906001019060200180831161064357829003601f168201915b50505050509050919050565b610674610ed4565b60006106898486610f5290919063ffffffff16565b90506000610697828461042d565b116106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce90613104565b60405180910390fd5b60006007600084815260200190815260200160002054905080600760008581526020019081526020016000205414610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90613196565b60405180910390fd5b60006107598588610f5290919063ffffffff16565b90506006600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef90613228565b60405180910390fd5b61080483856001610f79565b50505050505050565b6108156111c1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061085b575061085a856108556111c1565b610c3d565b5b61089a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610891906132ba565b60405180910390fd5b6108a785858585856111c9565b5050505050565b606081518351146108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb9061334c565b60405180910390fd5b6000835167ffffffffffffffff81111561091157610910612790565b5b60405190808252806020026020018201604052801561093f5781602001602082028036833780820191505090505b50905060005b84518110156109bc5761098c8582815181106109645761096361336c565b5b602002602001015185838151811061097f5761097e61336c565b5b602002602001015161042d565b82828151811061099f5761099e61336c565b5b602002602001018181525050806109b5906133ca565b9050610945565b508091505092915050565b6000806109d383610c20565b119050919050565b6109fe6109e66111c1565b848484604051806020016040528060008152506114ed565b505050565b6000600460009054906101000a900460ff16905090565b610a22610ed4565b610a2c600061178b565b565b610a36610ed4565b60016006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60076020528060005260406000206000915090505481565b610b25610b1e6111c1565b838361184f565b5050565b610b31610ed4565b60008103610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b90613484565b60405180910390fd5b600060076000858152602001908152602001600020541480610ba85750806007600085815260200190815260200160002054145b610be7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bde9061353c565b60405180910390fd5b610c02848484604051806020016040528060008152506119bb565b80600760008581526020019081526020016000208190555050505050565b600060056000838152602001908152602001600020549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610cd9610ed4565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610d4e6111c1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610d945750610d9385610d8e6111c1565b610c3d565b5b610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca906132ba565b60405180910390fd5b610de085858585856114ed565b5050505050565b610def610ed4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e55906135ce565b60405180910390fd5b610e678161178b565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610edc6111c1565b73ffffffffffffffffffffffffffffffffffffffff16610efa610aa3565b73ffffffffffffffffffffffffffffffffffffffff1614610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f479061363a565b60405180910390fd5b565b6000806000610f618585611b6c565b91509150610f6e81611bbd565b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdf906136cc565b60405180910390fd5b6000610ff26111c1565b90506000610fff84611d23565b9050600061100c84611d23565b905061102c83876000858560405180602001604052806000815250611d9d565b60006001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb9061375e565b60405180910390fd5b8481036001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161119292919061377e565b60405180910390a46111b884886000868660405180602001604052806000815250611db3565b50505050505050565b600033905090565b815183511461120d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120490613819565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361127c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611273906138ab565b60405180910390fd5b60006112866111c1565b9050611296818787878787611d9d565b60005b845181101561144a5760008582815181106112b7576112b661336c565b5b6020026020010151905060008583815181106112d6576112d561336c565b5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f9061393d565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461142f919061395d565b9250508190555050505080611443906133ca565b9050611299565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516114c1929190613991565b60405180910390a46114d7818787878787611db3565b6114e5818787878787611dbb565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611553906138ab565b60405180910390fd5b60006115666111c1565b9050600061157385611d23565b9050600061158085611d23565b9050611590838989858589611d9d565b60006001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015611628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161f9061393d565b60405180910390fd5b8581036001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116df919061395d565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161175c92919061377e565b60405180910390a4611772848a8a86868a611db3565b611780848a8a8a8a8a611f92565b505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b490613a3a565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119ae9190612656565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2190613acc565b60405180910390fd5b6000611a346111c1565b90506000611a4185611d23565b90506000611a4e85611d23565b9050611a5f83600089858589611d9d565b846001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611abf919061395d565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611b3d92919061377e565b60405180910390a4611b5483600089858589611db3565b611b6383600089898989611f92565b50505050505050565b6000806041835103611bad5760008060006020860151925060408601519150606086015160001a9050611ba187828585612169565b94509450505050611bb6565b60006002915091505b9250929050565b60006004811115611bd157611bd0613aec565b5b816004811115611be457611be3613aec565b5b0315611d205760016004811115611bfe57611bfd613aec565b5b816004811115611c1157611c10613aec565b5b03611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4890613b67565b60405180910390fd5b60026004811115611c6557611c64613aec565b5b816004811115611c7857611c77613aec565b5b03611cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caf90613bd3565b60405180910390fd5b60036004811115611ccc57611ccb613aec565b5b816004811115611cdf57611cde613aec565b5b03611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1690613c65565b60405180910390fd5b5b50565b60606000600167ffffffffffffffff811115611d4257611d41612790565b5b604051908082528060200260200182016040528015611d705781602001602082028036833780820191505090505b5090508281600081518110611d8857611d8761336c565b5b60200260200101818152505080915050919050565b611dab86868686868661224b565b505050505050565b505050505050565b611dda8473ffffffffffffffffffffffffffffffffffffffff1661241b565b15611f8a578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611e20959493929190613cda565b6020604051808303816000875af1925050508015611e5c57506040513d601f19601f82011682018060405250810190611e599190613d57565b60015b611f0157611e68613d91565b806308c379a003611ec45750611e7c613db3565b80611e875750611ec6565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb919061272e565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef890613eb5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7f90613f47565b60405180910390fd5b505b505050505050565b611fb18473ffffffffffffffffffffffffffffffffffffffff1661241b565b15612161578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611ff7959493929190613f67565b6020604051808303816000875af192505050801561203357506040513d601f19601f820116820180604052508101906120309190613d57565b60015b6120d85761203f613d91565b806308c379a00361209b5750612053613db3565b8061205e575061209d565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612092919061272e565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90613eb5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215690613f47565b60405180910390fd5b505b505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156121a4576000600391509150612242565b6000600187878787604051600081526020016040526040516121c99493929190613fec565b6020604051602081039080840390855afa1580156121eb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361223957600060019250925050612242565b80600092509250505b94509492505050565b61225986868686868661243e565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361230a5760005b8351811015612308578281815181106122ac576122ab61336c565b5b6020026020010151600560008684815181106122cb576122ca61336c565b5b6020026020010151815260200190815260200160002060008282546122f0919061395d565b9250508190555080612301906133ca565b9050612290565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036124135760005b835181101561241157600084828151811061235f5761235e61336c565b5b60200260200101519050600084838151811061237e5761237d61336c565b5b60200260200101519050600060056000848152602001908152602001600020549050818110156123e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123da906140a3565b60405180910390fd5b81810360056000858152602001908152602001600020819055505050508061240a906133ca565b9050612341565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61244c86868686868661249c565b612454610a03565b15612494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248b90614135565b60405180910390fd5b505050505050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e3826124b8565b9050919050565b6124f3816124d8565b81146124fe57600080fd5b50565b600081359050612510816124ea565b92915050565b6000819050919050565b61252981612516565b811461253457600080fd5b50565b60008135905061254681612520565b92915050565b60008060408385031215612563576125626124ae565b5b600061257185828601612501565b925050602061258285828601612537565b9150509250929050565b61259581612516565b82525050565b60006020820190506125b0600083018461258c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125eb816125b6565b81146125f657600080fd5b50565b600081359050612608816125e2565b92915050565b600060208284031215612624576126236124ae565b5b6000612632848285016125f9565b91505092915050565b60008115159050919050565b6126508161263b565b82525050565b600060208201905061266b6000830184612647565b92915050565b600060208284031215612687576126866124ae565b5b600061269584828501612537565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d85780820151818401526020810190506126bd565b60008484015250505050565b6000601f19601f8301169050919050565b60006127008261269e565b61270a81856126a9565b935061271a8185602086016126ba565b612723816126e4565b840191505092915050565b6000602082019050818103600083015261274881846126f5565b905092915050565b6000819050919050565b61276381612750565b811461276e57600080fd5b50565b6000813590506127808161275a565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127c8826126e4565b810181811067ffffffffffffffff821117156127e7576127e6612790565b5b80604052505050565b60006127fa6124a4565b905061280682826127bf565b919050565b600067ffffffffffffffff82111561282657612825612790565b5b61282f826126e4565b9050602081019050919050565b82818337600083830152505050565b600061285e6128598461280b565b6127f0565b90508281526020810184848401111561287a5761287961278b565b5b61288584828561283c565b509392505050565b600082601f8301126128a2576128a1612786565b5b81356128b284826020860161284b565b91505092915050565b600080600080608085870312156128d5576128d46124ae565b5b60006128e387828801612771565b945050602085013567ffffffffffffffff811115612904576129036124b3565b5b6129108782880161288d565b935050604085013567ffffffffffffffff811115612931576129306124b3565b5b61293d8782880161288d565b925050606061294e87828801612537565b91505092959194509250565b600067ffffffffffffffff82111561297557612974612790565b5b602082029050602081019050919050565b600080fd5b600061299e6129998461295a565b6127f0565b905080838252602082019050602084028301858111156129c1576129c0612986565b5b835b818110156129ea57806129d68882612537565b8452602084019350506020810190506129c3565b5050509392505050565b600082601f830112612a0957612a08612786565b5b8135612a1984826020860161298b565b91505092915050565b600080600080600060a08688031215612a3e57612a3d6124ae565b5b6000612a4c88828901612501565b9550506020612a5d88828901612501565b945050604086013567ffffffffffffffff811115612a7e57612a7d6124b3565b5b612a8a888289016129f4565b935050606086013567ffffffffffffffff811115612aab57612aaa6124b3565b5b612ab7888289016129f4565b925050608086013567ffffffffffffffff811115612ad857612ad76124b3565b5b612ae48882890161288d565b9150509295509295909350565b600067ffffffffffffffff821115612b0c57612b0b612790565b5b602082029050602081019050919050565b6000612b30612b2b84612af1565b6127f0565b90508083825260208201905060208402830185811115612b5357612b52612986565b5b835b81811015612b7c5780612b688882612501565b845260208401935050602081019050612b55565b5050509392505050565b600082601f830112612b9b57612b9a612786565b5b8135612bab848260208601612b1d565b91505092915050565b60008060408385031215612bcb57612bca6124ae565b5b600083013567ffffffffffffffff811115612be957612be86124b3565b5b612bf585828601612b86565b925050602083013567ffffffffffffffff811115612c1657612c156124b3565b5b612c22858286016129f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c6181612516565b82525050565b6000612c738383612c58565b60208301905092915050565b6000602082019050919050565b6000612c9782612c2c565b612ca18185612c37565b9350612cac83612c48565b8060005b83811015612cdd578151612cc48882612c67565b9750612ccf83612c7f565b925050600181019050612cb0565b5085935050505092915050565b60006020820190508181036000830152612d048184612c8c565b905092915050565b600080600060608486031215612d2557612d246124ae565b5b6000612d3386828701612501565b9350506020612d4486828701612537565b9250506040612d5586828701612537565b9150509250925092565b60008060408385031215612d7657612d756124ae565b5b6000612d8485828601612537565b9250506020612d9585828601612501565b9150509250929050565b612da8816124d8565b82525050565b6000602082019050612dc36000830184612d9f565b92915050565b612dd28161263b565b8114612ddd57600080fd5b50565b600081359050612def81612dc9565b92915050565b60008060408385031215612e0c57612e0b6124ae565b5b6000612e1a85828601612501565b9250506020612e2b85828601612de0565b9150509250929050565b60008060008060808587031215612e4f57612e4e6124ae565b5b6000612e5d87828801612501565b9450506020612e6e87828801612537565b9350506040612e7f87828801612537565b9250506060612e9087828801612537565b91505092959194509250565b60008060408385031215612eb357612eb26124ae565b5b6000612ec185828601612501565b9250506020612ed285828601612501565b9150509250929050565b600080600080600060a08688031215612ef857612ef76124ae565b5b6000612f0688828901612501565b9550506020612f1788828901612501565b9450506040612f2888828901612537565b9350506060612f3988828901612537565b925050608086013567ffffffffffffffff811115612f5a57612f596124b3565b5b612f668882890161288d565b9150509295509295909350565b600060208284031215612f8957612f886124ae565b5b6000612f9784828501612501565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612ffc602a836126a9565b915061300782612fa0565b604082019050919050565b6000602082019050818103600083015261302b81612fef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061307957607f821691505b60208210810361308c5761308b613032565b5b50919050565b7f4372697074616e436f6c6c656374696f6e733a20637573746f6d657220646f6560008201527f73206e6f74206f776e20616e7920746f6b656e00000000000000000000000000602082015250565b60006130ee6033836126a9565b91506130f982613092565b604082019050919050565b6000602082019050818103600083015261311d816130e1565b9050919050565b7f4372697074616e436f6c6c656374696f6e733a20696e76616c6964206d65726360008201527f68616e7400000000000000000000000000000000000000000000000000000000602082015250565b60006131806024836126a9565b915061318b82613124565b604082019050919050565b600060208201905081810360008301526131af81613173565b9050919050565b7f4372697074616e436f6c6c656374696f6e733a20496e76616c6964206d65726360008201527f68616e74206f70657261746f7200000000000000000000000000000000000000602082015250565b6000613212602d836126a9565b915061321d826131b6565b604082019050919050565b6000602082019050818103600083015261324181613205565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b60006132a4602e836126a9565b91506132af82613248565b604082019050919050565b600060208201905081810360008301526132d381613297565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006133366029836126a9565b9150613341826132da565b604082019050919050565b6000602082019050818103600083015261336581613329565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133d582612516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134075761340661339b565b5b600182019050919050565b7f4372697074616e436f6c6c656374696f6e3a206d65726368616e74204944206360008201527f616e6e6f74206265207a65726f00000000000000000000000000000000000000602082015250565b600061346e602d836126a9565b915061347982613412565b604082019050919050565b6000602082019050818103600083015261349d81613461565b9050919050565b7f4372697074616e436f6c6c656374696f6e733a20636f6c6c656374696f6e206160008201527f6c72656164792061737369676e656420746f20616e6f74686572206d6572636860208201527f616e740000000000000000000000000000000000000000000000000000000000604082015250565b60006135266043836126a9565b9150613531826134a4565b606082019050919050565b6000602082019050818103600083015261355581613519565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006135b86026836126a9565b91506135c38261355c565b604082019050919050565b600060208201905081810360008301526135e7816135ab565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006136246020836126a9565b915061362f826135ee565b602082019050919050565b6000602082019050818103600083015261365381613617565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006136b66023836126a9565b91506136c18261365a565b604082019050919050565b600060208201905081810360008301526136e5816136a9565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006137486024836126a9565b9150613753826136ec565b604082019050919050565b600060208201905081810360008301526137778161373b565b9050919050565b6000604082019050613793600083018561258c565b6137a0602083018461258c565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006138036028836126a9565b915061380e826137a7565b604082019050919050565b60006020820190508181036000830152613832816137f6565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006138956025836126a9565b91506138a082613839565b604082019050919050565b600060208201905081810360008301526138c481613888565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000613927602a836126a9565b9150613932826138cb565b604082019050919050565b600060208201905081810360008301526139568161391a565b9050919050565b600061396882612516565b915061397383612516565b925082820190508082111561398b5761398a61339b565b5b92915050565b600060408201905081810360008301526139ab8185612c8c565b905081810360208301526139bf8184612c8c565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613a246029836126a9565b9150613a2f826139c8565b604082019050919050565b60006020820190508181036000830152613a5381613a17565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613ab66021836126a9565b9150613ac182613a5a565b604082019050919050565b60006020820190508181036000830152613ae581613aa9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613b516018836126a9565b9150613b5c82613b1b565b602082019050919050565b60006020820190508181036000830152613b8081613b44565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613bbd601f836126a9565b9150613bc882613b87565b602082019050919050565b60006020820190508181036000830152613bec81613bb0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c4f6022836126a9565b9150613c5a82613bf3565b604082019050919050565b60006020820190508181036000830152613c7e81613c42565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613cac82613c85565b613cb68185613c90565b9350613cc68185602086016126ba565b613ccf816126e4565b840191505092915050565b600060a082019050613cef6000830188612d9f565b613cfc6020830187612d9f565b8181036040830152613d0e8186612c8c565b90508181036060830152613d228185612c8c565b90508181036080830152613d368184613ca1565b90509695505050505050565b600081519050613d51816125e2565b92915050565b600060208284031215613d6d57613d6c6124ae565b5b6000613d7b84828501613d42565b91505092915050565b60008160e01c9050919050565b600060033d1115613db05760046000803e613dad600051613d84565b90505b90565b600060443d10613e4057613dc56124a4565b60043d036004823e80513d602482011167ffffffffffffffff82111715613ded575050613e40565b808201805167ffffffffffffffff811115613e0b5750505050613e40565b80602083010160043d038501811115613e28575050505050613e40565b613e37826020018501866127bf565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613e9f6034836126a9565b9150613eaa82613e43565b604082019050919050565b60006020820190508181036000830152613ece81613e92565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000613f316028836126a9565b9150613f3c82613ed5565b604082019050919050565b60006020820190508181036000830152613f6081613f24565b9050919050565b600060a082019050613f7c6000830188612d9f565b613f896020830187612d9f565b613f96604083018661258c565b613fa3606083018561258c565b8181036080830152613fb58184613ca1565b90509695505050505050565b613fca81612750565b82525050565b600060ff82169050919050565b613fe681613fd0565b82525050565b60006080820190506140016000830187613fc1565b61400e6020830186613fdd565b61401b6040830185613fc1565b6140286060830184613fc1565b95945050505050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061408d6028836126a9565b915061409882614031565b604082019050919050565b600060208201905081810360008301526140bc81614080565b9050919050565b7f455243313135355061757361626c653a20746f6b656e207472616e736665722060008201527f7768696c65207061757365640000000000000000000000000000000000000000602082015250565b600061411f602c836126a9565b915061412a826140c3565b604082019050919050565b6000602082019050818103600083015261414e81614112565b905091905056fea264697066735822122008ac626a2a4544500ccd31fea8a3dd9a70ebfdd8496a7a71b758f8e0cf89c32c64736f6c63430008110033";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MERCHANTOPERATORS = "merchantOperators";

    public static final String FUNC_MERCHANTS = "merchants";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_ADDMERCHANTOPERATOR = "addMerchantOperator";

    public static final String FUNC_REMOVEMERCHANTOPERATOR = "removeMerchantOperator";

    public static final String FUNC_SAFETRANSFER = "safeTransfer";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_BURN = "burn";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));

    public static final Event PAUSED_EVENT = new Event("Paused",
            Collections.singletonList(new TypeReference<Address>() {
            }));

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
            Arrays.asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));

    public static final Event URI_EVENT = new Event("URI",
            Arrays.asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));

    public static final Event UNPAUSED_EVENT = new Event("Unpaused",
            Collections.singletonList(new TypeReference<Address>() {
            }));

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1668180470961", "0xB8Fd635821B68edaCFe4aa628749BAc808a73828");
        _addresses.put("1668187973134", "0x79faD7960A810D39b1A54Ff40d956721dB120442");
    }

    @Deprecated
    protected NFTCollections(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTCollections(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFTCollections(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NFTCollections(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = log;
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = log;
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = log;
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = log;
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = log;
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = log;
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.asList(new Address(account),
                new Uint256(id)),
                Collections.singletonList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.asList(new DynamicArray<>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                        new DynamicArray<>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class))),
                Collections.singletonList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                });
    }

    public RemoteFunctionCall<Boolean> exists(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXISTS,
                Collections.singletonList(new Uint256(id)),
                Collections.singletonList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.asList(new Address(account),
                new Address(operator)),
                Collections.singletonList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> merchantOperators(BigInteger param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MERCHANTOPERATORS,
                Arrays.asList(new Uint256(param0),
                new Address(param1)),
                Collections.singletonList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> merchants(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MERCHANTS,
                Collections.singletonList(new Uint256(param0)),
                Collections.singletonList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED,
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Collections.emptyList(),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.asList(new Address(from),
                new Address(to),
                        new DynamicArray<>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                        new DynamicArray<>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.asList(new Address(operator),
                new Bool(approved)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Collections.singletonList(new Bytes4(interfaceId)),
                Collections.singletonList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY,
                Collections.singletonList(new Uint256(id)),
                Collections.singletonList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Collections.singletonList(new Address(newOwner)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI,
                Collections.singletonList(new Uint256(param0)),
                Collections.singletonList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addMerchantOperator(BigInteger _merchantId, String _merchantOperator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMERCHANTOPERATOR,
                Arrays.asList(new Uint256(_merchantId),
                new Address(_merchantOperator)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeMerchantOperator(BigInteger _merchantId, String _merchantOperator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEMERCHANTOPERATOR,
                Arrays.asList(new Uint256(_merchantId),
                new Address(_merchantOperator)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransfer(String _to, BigInteger _id, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFER,
                Arrays.asList(new Address(_to),
                new Uint256(_id),
                new Uint256(_amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _to, BigInteger _collectionId, BigInteger _amount, BigInteger _merchantId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.asList(new Address(_to),
                new Uint256(_collectionId),
                new Uint256(_amount),
                new Uint256(_merchantId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(byte[] _message, byte[] _customerSignature, byte[] _merchantOperatorSignature, BigInteger _collectionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Bytes32(_message),
                new org.web3j.abi.datatypes.DynamicBytes(_customerSignature),
                new org.web3j.abi.datatypes.DynamicBytes(_merchantOperatorSignature),
                new Uint256(_collectionId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NFTCollections load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTCollections(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFTCollections load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTCollections(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFTCollections load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFTCollections(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFTCollections load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFTCollections(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFTCollections> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String uri) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Collections.singletonList(new Utf8String(uri)));
        return deployRemoteCall(NFTCollections.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<NFTCollections> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String uri) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Collections.singletonList(new Utf8String(uri)));
        return deployRemoteCall(NFTCollections.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTCollections> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String uri) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Collections.singletonList(new Utf8String(uri)));
        return deployRemoteCall(NFTCollections.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTCollections> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String uri) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Collections.singletonList(new Utf8String(uri)));
        return deployRemoteCall(NFTCollections.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
